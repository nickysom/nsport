{"version":3,"sources":["main.js"],"names":["config","type","Phaser","AUTO","width","window","innerWidth","height","innerHeight","scene","preload","create","_this","graphics","add","lineStyle","strokeRect","cameras","main","titleText","pressStartText","titleDisplayedText","pressStartDisplayedText","titleTextObject","text","fill","fontSize","fontFamily","pressStartTextObject","time","addEvent","delay","callback","length","setText","showPressStartText","loop","_this2","startBlinkingCursor","addInputListeners","_this3","cursor","visible","_this4","input","keyboard","on","start","update","gameScene","game","Game"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["const config = {\r\n    type: Phaser.AUTO,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    scene: {\r\n        preload: function() {\r\n            // Load assets here if needed\r\n        },\r\n        create: function() {\r\n            // Create a green outline for the CRT effect\r\n            const graphics = this.add.graphics();\r\n            graphics.lineStyle(10, 0x00ff00); // Green color with a thickness of 10\r\n            graphics.strokeRect(50, 50, this.cameras.main.width - 100, this.cameras.main.height - 100); // Draw rectangle\r\n\r\n            // Text variables\r\n            const titleText = \"Welcome to N.S. Portfolio!\"; // h1 text\r\n            const pressStartText = \"Press ENTER or Tap to start\"; // h2 text\r\n\r\n            // Separate displayed text for the title and press start text\r\n            this.titleDisplayedText = \"\"; // Holds the current part of h1 being displayed\r\n            this.pressStartDisplayedText = \"\"; // Holds the current part of h2 being displayed\r\n\r\n            // Create h1 and h2 text objects (initially empty)\r\n            this.titleTextObject = this.add.text(100, 100, '', { fill: '#00ff00', fontSize: '48px', fontFamily: 'Montserrat' });\r\n            this.pressStartTextObject = this.add.text(100, 160, '', { fill: '#00ff00', fontSize: '32px', fontFamily: 'Montserrat' });\r\n\r\n            // Typing effect for h1 (title text)\r\n            this.time.addEvent({\r\n                delay: 100, // Delay between each character\r\n                callback: () => {\r\n                    if (this.titleDisplayedText.length < titleText.length) {\r\n                        // Add one character at a time to titleDisplayedText\r\n                        this.titleDisplayedText += titleText[this.titleDisplayedText.length];\r\n                        this.titleTextObject.setText(this.titleDisplayedText);\r\n                    } else {\r\n                        // Once h1 is fully typed, proceed to h2\r\n                        this.showPressStartText(); \r\n                    }\r\n                },\r\n                loop: true\r\n            });\r\n        },\r\n        \r\n        // Function to display typing effect for h2 (Press ENTER or Tap to start)\r\n        showPressStartText: function() {\r\n            const pressStartText = \"Press ENTER or Tap to start\";\r\n            \r\n            // Typing effect for h2 (press start text)\r\n            this.time.addEvent({\r\n                delay: 100, // Delay between each character\r\n                callback: () => {\r\n                    if (this.pressStartDisplayedText.length < pressStartText.length) {\r\n                        // Add one character at a time to pressStartDisplayedText\r\n                        this.pressStartDisplayedText += pressStartText[this.pressStartDisplayedText.length];\r\n                        this.pressStartTextObject.setText(this.pressStartDisplayedText);\r\n                    } else {\r\n                        this.startBlinkingCursor(); // Once typed, show blinking cursor\r\n                        this.addInputListeners(); // Add input listeners after both texts have been typed\r\n                    }\r\n                },\r\n                loop: true\r\n            });\r\n        },\r\n\r\n        // Function to display blinking cursor after h2 is fully typed\r\n        startBlinkingCursor: function() {\r\n            // Create a blinking underscore cursor\r\n            this.cursor = this.add.text(100 + this.pressStartTextObject.width, 160, '_', { fill: '#00ff00', fontSize: '32px', fontFamily: 'Montserrat' });\r\n            \r\n            // Set up the blinking effect\r\n            this.time.addEvent({\r\n                delay: 500,\r\n                callback: () => {\r\n                    this.cursor.visible = !this.cursor.visible; // Toggle visibility to create blinking effect\r\n                },\r\n                loop: true\r\n            });\r\n        },\r\n\r\n        // Add event listeners for ENTER and screen tap\r\n        addInputListeners: function() {\r\n            // Add listener for the Enter key\r\n            this.input.keyboard.on('keydown-ENTER', () => {\r\n                this.scene.start('gameScene'); // Change to the actual game scene\r\n            });\r\n\r\n            // Add listener for tap/click\r\n            this.input.on('pointerdown', () => {\r\n                this.scene.start('gameScene'); // Tap to switch scenes\r\n            });\r\n        },\r\n\r\n        update: function() {\r\n            // Update logic here if needed\r\n        }\r\n    }\r\n};\r\n\r\n// Define game scene before initializing the game to ensure itâ€™s available\r\nconst gameScene = {\r\n    preload: function() {\r\n        // Load game assets here if needed\r\n    },\r\n    create: function() {\r\n        this.add.text(100, 100, 'Game Scene', { fill: '#00ff00', fontSize: '48px', fontFamily: 'Montserrat' });\r\n        // Add game logic here\r\n    },\r\n    update: function() {\r\n        // Game update logic here\r\n    }\r\n};\r\n\r\n// Create the game\r\nconst game = new Phaser.Game(config);\r\n\r\n// Add the game scene immediately so it is available when we want to switch to it\r\ngame.scene.add('gameScene', gameScene);\r\n\r\n\r\n\r\n"]}